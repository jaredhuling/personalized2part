// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// mmbcd_cpp
Rcpp::List mmbcd_cpp(const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::VectorXd>& Y, const Eigen::Map<Eigen::VectorXi>& groups, const Eigen::Map<Eigen::VectorXi>& unique_groups, Eigen::VectorXd& group_weights, Eigen::VectorXd& weights, Eigen::VectorXd& lambda, const int& nlambda, const double& lambda_min_ratio, const int& maxit, const double& tol, const bool& intercept, std::vector<std::string>& family, std::vector<std::string>& penalty);
RcppExport SEXP _personalized2part_mmbcd_cpp(SEXP XSEXP, SEXP YSEXP, SEXP groupsSEXP, SEXP unique_groupsSEXP, SEXP group_weightsSEXP, SEXP weightsSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP interceptSEXP, SEXP familySEXP, SEXP penaltySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type unique_groups(unique_groupsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type group_weights(group_weightsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type family(familySEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type penalty(penaltySEXP);
    rcpp_result_gen = Rcpp::wrap(mmbcd_cpp(X, Y, groups, unique_groups, group_weights, weights, lambda, nlambda, lambda_min_ratio, maxit, tol, intercept, family, penalty));
    return rcpp_result_gen;
END_RCPP
}
// mmbcd_gaussian_cpp
Rcpp::List mmbcd_gaussian_cpp(const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::VectorXd>& Y, const Eigen::Map<Eigen::VectorXi>& groups, const Eigen::Map<Eigen::VectorXi>& unique_groups, Eigen::VectorXd& group_weights, Eigen::VectorXd& weights, Eigen::VectorXd& lambda, const int& nlambda, const double& lambda_min_ratio, const int& maxit, const double& tol, const bool& intercept);
RcppExport SEXP _personalized2part_mmbcd_gaussian_cpp(SEXP XSEXP, SEXP YSEXP, SEXP groupsSEXP, SEXP unique_groupsSEXP, SEXP group_weightsSEXP, SEXP weightsSEXP, SEXP lambdaSEXP, SEXP nlambdaSEXP, SEXP lambda_min_ratioSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi>& >::type unique_groups(unique_groupsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type group_weights(group_weightsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nlambda(nlambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_min_ratio(lambda_min_ratioSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool& >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(mmbcd_gaussian_cpp(X, Y, groups, unique_groups, group_weights, weights, lambda, nlambda, lambda_min_ratio, maxit, tol, intercept));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_personalized2part_mmbcd_cpp", (DL_FUNC) &_personalized2part_mmbcd_cpp, 14},
    {"_personalized2part_mmbcd_gaussian_cpp", (DL_FUNC) &_personalized2part_mmbcd_gaussian_cpp, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_personalized2part(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
